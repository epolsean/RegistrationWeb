//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RegistrationWeb.Logic.RegistrationServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CourseDAO", Namespace="http://schemas.datacontract.org/2004/07/RegistrationData.DataClient.Models")]
    [System.SerializableAttribute()]
    public partial class CourseDAO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CapacityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CreditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DepartmentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO ProfessorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Capacity {
            get {
                return this.CapacityField;
            }
            set {
                if ((this.CapacityField.Equals(value) != true)) {
                    this.CapacityField = value;
                    this.RaisePropertyChanged("Capacity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Credit {
            get {
                return this.CreditField;
            }
            set {
                if ((this.CreditField.Equals(value) != true)) {
                    this.CreditField = value;
                    this.RaisePropertyChanged("Credit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Department {
            get {
                return this.DepartmentField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartmentField, value) != true)) {
                    this.DepartmentField = value;
                    this.RaisePropertyChanged("Department");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO Professor {
            get {
                return this.ProfessorField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfessorField, value) != true)) {
                    this.ProfessorField = value;
                    this.RaisePropertyChanged("Professor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PersonDAO", Namespace="http://schemas.datacontract.org/2004/07/RegistrationData.DataClient.Models")]
    [System.SerializableAttribute()]
    public partial class PersonDAO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private RegistrationWeb.Logic.RegistrationServiceReference.PersonTypeDAO PersonTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RegistrationWeb.Logic.RegistrationServiceReference.PersonTypeDAO PersonType {
            get {
                return this.PersonTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonTypeField, value) != true)) {
                    this.PersonTypeField = value;
                    this.RaisePropertyChanged("PersonType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PersonTypeDAO", Namespace="http://schemas.datacontract.org/2004/07/RegistrationData.DataClient.Models")]
    [System.SerializableAttribute()]
    public partial class PersonTypeDAO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScheduleDAO", Namespace="http://schemas.datacontract.org/2004/07/RegistrationData.DataClient.Models")]
    [System.SerializableAttribute()]
    public partial class ScheduleDAO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO CourseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO PersonField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO Course {
            get {
                return this.CourseField;
            }
            set {
                if ((object.ReferenceEquals(this.CourseField, value) != true)) {
                    this.CourseField = value;
                    this.RaisePropertyChanged("Course");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO Person {
            get {
                return this.PersonField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonField, value) != true)) {
                    this.PersonField = value;
                    this.RaisePropertyChanged("Person");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RegistrationServiceReference.IRegistrationService")]
    public interface IRegistrationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetCourses", ReplyAction="http://tempuri.org/IRegistrationService/GetCoursesResponse")]
        RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO[] GetCourses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetCourses", ReplyAction="http://tempuri.org/IRegistrationService/GetCoursesResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO[]> GetCoursesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetPeople", ReplyAction="http://tempuri.org/IRegistrationService/GetPeopleResponse")]
        RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO[] GetPeople();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetPeople", ReplyAction="http://tempuri.org/IRegistrationService/GetPeopleResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO[]> GetPeopleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetPersonTypes", ReplyAction="http://tempuri.org/IRegistrationService/GetPersonTypesResponse")]
        RegistrationWeb.Logic.RegistrationServiceReference.PersonTypeDAO[] GetPersonTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetPersonTypes", ReplyAction="http://tempuri.org/IRegistrationService/GetPersonTypesResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.PersonTypeDAO[]> GetPersonTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetSchedules", ReplyAction="http://tempuri.org/IRegistrationService/GetSchedulesResponse")]
        RegistrationWeb.Logic.RegistrationServiceReference.ScheduleDAO[] GetSchedules();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetSchedules", ReplyAction="http://tempuri.org/IRegistrationService/GetSchedulesResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.ScheduleDAO[]> GetSchedulesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetCourse", ReplyAction="http://tempuri.org/IRegistrationService/GetCourseResponse")]
        RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO GetCourse(int cid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetCourse", ReplyAction="http://tempuri.org/IRegistrationService/GetCourseResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO> GetCourseAsync(int cid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetPerson", ReplyAction="http://tempuri.org/IRegistrationService/GetPersonResponse")]
        RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO GetPerson(int pid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetPerson", ReplyAction="http://tempuri.org/IRegistrationService/GetPersonResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO> GetPersonAsync(int pid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetPersonType", ReplyAction="http://tempuri.org/IRegistrationService/GetPersonTypeResponse")]
        RegistrationWeb.Logic.RegistrationServiceReference.PersonTypeDAO GetPersonType(int pid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetPersonType", ReplyAction="http://tempuri.org/IRegistrationService/GetPersonTypeResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.PersonTypeDAO> GetPersonTypeAsync(int pid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetSchedule", ReplyAction="http://tempuri.org/IRegistrationService/GetScheduleResponse")]
        RegistrationWeb.Logic.RegistrationServiceReference.ScheduleDAO GetSchedule(int cid, int pid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetSchedule", ReplyAction="http://tempuri.org/IRegistrationService/GetScheduleResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.ScheduleDAO> GetScheduleAsync(int cid, int pid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetAllFullCourses", ReplyAction="http://tempuri.org/IRegistrationService/GetAllFullCoursesResponse")]
        RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO[] GetAllFullCourses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetAllFullCourses", ReplyAction="http://tempuri.org/IRegistrationService/GetAllFullCoursesResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO[]> GetAllFullCoursesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetAllOpenCourses", ReplyAction="http://tempuri.org/IRegistrationService/GetAllOpenCoursesResponse")]
        RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO[] GetAllOpenCourses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetAllOpenCourses", ReplyAction="http://tempuri.org/IRegistrationService/GetAllOpenCoursesResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO[]> GetAllOpenCoursesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetEnrolledStudentsByCourse", ReplyAction="http://tempuri.org/IRegistrationService/GetEnrolledStudentsByCourseResponse")]
        RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO[] GetEnrolledStudentsByCourse(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetEnrolledStudentsByCourse", ReplyAction="http://tempuri.org/IRegistrationService/GetEnrolledStudentsByCourseResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO[]> GetEnrolledStudentsByCourseAsync(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetAllActiveStudents", ReplyAction="http://tempuri.org/IRegistrationService/GetAllActiveStudentsResponse")]
        RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO[] GetAllActiveStudents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetAllActiveStudents", ReplyAction="http://tempuri.org/IRegistrationService/GetAllActiveStudentsResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO[]> GetAllActiveStudentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetStudentSchedule", ReplyAction="http://tempuri.org/IRegistrationService/GetStudentScheduleResponse")]
        RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO[] GetStudentSchedule(RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/GetStudentSchedule", ReplyAction="http://tempuri.org/IRegistrationService/GetStudentScheduleResponse")]
        System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO[]> GetStudentScheduleAsync(RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/AddCourse", ReplyAction="http://tempuri.org/IRegistrationService/AddCourseResponse")]
        bool AddCourse(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/AddCourse", ReplyAction="http://tempuri.org/IRegistrationService/AddCourseResponse")]
        System.Threading.Tasks.Task<bool> AddCourseAsync(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/AddPerson", ReplyAction="http://tempuri.org/IRegistrationService/AddPersonResponse")]
        bool AddPerson(RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/AddPerson", ReplyAction="http://tempuri.org/IRegistrationService/AddPersonResponse")]
        System.Threading.Tasks.Task<bool> AddPersonAsync(RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/AddPersonType", ReplyAction="http://tempuri.org/IRegistrationService/AddPersonTypeResponse")]
        bool AddPersonType(RegistrationWeb.Logic.RegistrationServiceReference.PersonTypeDAO personType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/AddPersonType", ReplyAction="http://tempuri.org/IRegistrationService/AddPersonTypeResponse")]
        System.Threading.Tasks.Task<bool> AddPersonTypeAsync(RegistrationWeb.Logic.RegistrationServiceReference.PersonTypeDAO personType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/RegisterCourse", ReplyAction="http://tempuri.org/IRegistrationService/RegisterCourseResponse")]
        bool RegisterCourse(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course, RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/RegisterCourse", ReplyAction="http://tempuri.org/IRegistrationService/RegisterCourseResponse")]
        System.Threading.Tasks.Task<bool> RegisterCourseAsync(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course, RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/CartCourse", ReplyAction="http://tempuri.org/IRegistrationService/CartCourseResponse")]
        bool CartCourse(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course, RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/CartCourse", ReplyAction="http://tempuri.org/IRegistrationService/CartCourseResponse")]
        System.Threading.Tasks.Task<bool> CartCourseAsync(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course, RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/DropCourse", ReplyAction="http://tempuri.org/IRegistrationService/DropCourseResponse")]
        bool DropCourse(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course, RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/DropCourse", ReplyAction="http://tempuri.org/IRegistrationService/DropCourseResponse")]
        System.Threading.Tasks.Task<bool> DropCourseAsync(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course, RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/CancelCourse", ReplyAction="http://tempuri.org/IRegistrationService/CancelCourseResponse")]
        bool CancelCourse(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/CancelCourse", ReplyAction="http://tempuri.org/IRegistrationService/CancelCourseResponse")]
        System.Threading.Tasks.Task<bool> CancelCourseAsync(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ModifyCourse", ReplyAction="http://tempuri.org/IRegistrationService/ModifyCourseResponse")]
        bool ModifyCourse(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course, int newCapacity, int newStart, int newEnd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/ModifyCourse", ReplyAction="http://tempuri.org/IRegistrationService/ModifyCourseResponse")]
        System.Threading.Tasks.Task<bool> ModifyCourseAsync(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course, int newCapacity, int newStart, int newEnd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/RemoveStudent", ReplyAction="http://tempuri.org/IRegistrationService/RemoveStudentResponse")]
        bool RemoveStudent(RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO student);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRegistrationService/RemoveStudent", ReplyAction="http://tempuri.org/IRegistrationService/RemoveStudentResponse")]
        System.Threading.Tasks.Task<bool> RemoveStudentAsync(RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO student);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRegistrationServiceChannel : RegistrationWeb.Logic.RegistrationServiceReference.IRegistrationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegistrationServiceClient : System.ServiceModel.ClientBase<RegistrationWeb.Logic.RegistrationServiceReference.IRegistrationService>, RegistrationWeb.Logic.RegistrationServiceReference.IRegistrationService {
        
        public RegistrationServiceClient() {
        }
        
        public RegistrationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RegistrationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RegistrationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RegistrationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO[] GetCourses() {
            return base.Channel.GetCourses();
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO[]> GetCoursesAsync() {
            return base.Channel.GetCoursesAsync();
        }
        
        public RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO[] GetPeople() {
            return base.Channel.GetPeople();
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO[]> GetPeopleAsync() {
            return base.Channel.GetPeopleAsync();
        }
        
        public RegistrationWeb.Logic.RegistrationServiceReference.PersonTypeDAO[] GetPersonTypes() {
            return base.Channel.GetPersonTypes();
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.PersonTypeDAO[]> GetPersonTypesAsync() {
            return base.Channel.GetPersonTypesAsync();
        }
        
        public RegistrationWeb.Logic.RegistrationServiceReference.ScheduleDAO[] GetSchedules() {
            return base.Channel.GetSchedules();
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.ScheduleDAO[]> GetSchedulesAsync() {
            return base.Channel.GetSchedulesAsync();
        }
        
        public RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO GetCourse(int cid) {
            return base.Channel.GetCourse(cid);
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO> GetCourseAsync(int cid) {
            return base.Channel.GetCourseAsync(cid);
        }
        
        public RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO GetPerson(int pid) {
            return base.Channel.GetPerson(pid);
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO> GetPersonAsync(int pid) {
            return base.Channel.GetPersonAsync(pid);
        }
        
        public RegistrationWeb.Logic.RegistrationServiceReference.PersonTypeDAO GetPersonType(int pid) {
            return base.Channel.GetPersonType(pid);
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.PersonTypeDAO> GetPersonTypeAsync(int pid) {
            return base.Channel.GetPersonTypeAsync(pid);
        }
        
        public RegistrationWeb.Logic.RegistrationServiceReference.ScheduleDAO GetSchedule(int cid, int pid) {
            return base.Channel.GetSchedule(cid, pid);
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.ScheduleDAO> GetScheduleAsync(int cid, int pid) {
            return base.Channel.GetScheduleAsync(cid, pid);
        }
        
        public RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO[] GetAllFullCourses() {
            return base.Channel.GetAllFullCourses();
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO[]> GetAllFullCoursesAsync() {
            return base.Channel.GetAllFullCoursesAsync();
        }
        
        public RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO[] GetAllOpenCourses() {
            return base.Channel.GetAllOpenCourses();
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO[]> GetAllOpenCoursesAsync() {
            return base.Channel.GetAllOpenCoursesAsync();
        }
        
        public RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO[] GetEnrolledStudentsByCourse(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course) {
            return base.Channel.GetEnrolledStudentsByCourse(course);
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO[]> GetEnrolledStudentsByCourseAsync(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course) {
            return base.Channel.GetEnrolledStudentsByCourseAsync(course);
        }
        
        public RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO[] GetAllActiveStudents() {
            return base.Channel.GetAllActiveStudents();
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO[]> GetAllActiveStudentsAsync() {
            return base.Channel.GetAllActiveStudentsAsync();
        }
        
        public RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO[] GetStudentSchedule(RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO person) {
            return base.Channel.GetStudentSchedule(person);
        }
        
        public System.Threading.Tasks.Task<RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO[]> GetStudentScheduleAsync(RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO person) {
            return base.Channel.GetStudentScheduleAsync(person);
        }
        
        public bool AddCourse(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course) {
            return base.Channel.AddCourse(course);
        }
        
        public System.Threading.Tasks.Task<bool> AddCourseAsync(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course) {
            return base.Channel.AddCourseAsync(course);
        }
        
        public bool AddPerson(RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO person) {
            return base.Channel.AddPerson(person);
        }
        
        public System.Threading.Tasks.Task<bool> AddPersonAsync(RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO person) {
            return base.Channel.AddPersonAsync(person);
        }
        
        public bool AddPersonType(RegistrationWeb.Logic.RegistrationServiceReference.PersonTypeDAO personType) {
            return base.Channel.AddPersonType(personType);
        }
        
        public System.Threading.Tasks.Task<bool> AddPersonTypeAsync(RegistrationWeb.Logic.RegistrationServiceReference.PersonTypeDAO personType) {
            return base.Channel.AddPersonTypeAsync(personType);
        }
        
        public bool RegisterCourse(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course, RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO person) {
            return base.Channel.RegisterCourse(course, person);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterCourseAsync(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course, RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO person) {
            return base.Channel.RegisterCourseAsync(course, person);
        }
        
        public bool CartCourse(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course, RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO person) {
            return base.Channel.CartCourse(course, person);
        }
        
        public System.Threading.Tasks.Task<bool> CartCourseAsync(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course, RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO person) {
            return base.Channel.CartCourseAsync(course, person);
        }
        
        public bool DropCourse(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course, RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO person) {
            return base.Channel.DropCourse(course, person);
        }
        
        public System.Threading.Tasks.Task<bool> DropCourseAsync(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course, RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO person) {
            return base.Channel.DropCourseAsync(course, person);
        }
        
        public bool CancelCourse(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course) {
            return base.Channel.CancelCourse(course);
        }
        
        public System.Threading.Tasks.Task<bool> CancelCourseAsync(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course) {
            return base.Channel.CancelCourseAsync(course);
        }
        
        public bool ModifyCourse(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course, int newCapacity, int newStart, int newEnd) {
            return base.Channel.ModifyCourse(course, newCapacity, newStart, newEnd);
        }
        
        public System.Threading.Tasks.Task<bool> ModifyCourseAsync(RegistrationWeb.Logic.RegistrationServiceReference.CourseDAO course, int newCapacity, int newStart, int newEnd) {
            return base.Channel.ModifyCourseAsync(course, newCapacity, newStart, newEnd);
        }
        
        public bool RemoveStudent(RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO student) {
            return base.Channel.RemoveStudent(student);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveStudentAsync(RegistrationWeb.Logic.RegistrationServiceReference.PersonDAO student) {
            return base.Channel.RemoveStudentAsync(student);
        }
    }
}
